/* Hildana. M
 * Marks_U3_A6_Summative.java
 * This program allows the user to input a set of marks and 
 * recieve information such as the average mark, max & min mark, the range
 * and the number of students at each level 
 * May/04/2018
 */

/**
 *
 * @author himel9675
 */
import java.util.*;
import java.text.DecimalFormat;
public class FrameMarks_U3_A6_Summative extends javax.swing.JFrame {
     
    /**
     * Creates new form FrameMarks_U3_A6_Summative
     */
    
    ArrayList <String> marks = new ArrayList();
    
    /*
     * Finds the class average 
     * return the average mark 
     */
    public double classAverage()
    {
      double average, total=0;
      
      //add all the marks together 
      for (int i = 0; i < marks.size(); i++)
      {
         total += Double.parseDouble (marks.get(i)) ; 
      }
      
      //divide the total with the number of marks in the arraylist
      average = total / marks.size();
      
      //return the value 
      return average;
    }
    
    /*
     * Finds the maximum mark
     * return the maximum mark
     */
    public int maxNumber()
    {
       int max;
       
       //let max equal to the last number in the sorted marks list
       max = Integer.parseInt (marks.get(marks.size()-1));
       
       //return the maximum number 
       return max;
    }
    
    /*
     * Finds the minimum mark
     * return the minimum mark
     */
    public int minNumber()
    {
        int min;
        
        //let min equal to the first number in the sorted marks list
        min = Integer.parseInt (marks.get(0));
        
        //return the minimum mark 
        return min;
    }
    
    /*
     * Finds the number of students at each level
     * returns all five element 
     */
    public String [] studentLevel()
    {
       //array for the level 
       String [] level = {"Level R","Level 1","Level 2","Level 3","Level 4"}; 
       //array for the number of students 
       int [] numStudent = {0,0,0,0,0};
       
      
       for (int i = 0; i < marks.size(); i++)
       {
           //add 1 to the numStudent list when it passes the condition for each element
           if (Integer.parseInt(marks.get(i)) < 50)
           {
              numStudent [0] += 1;
           } else if (Integer.parseInt(marks.get(i)) >= 50 && Integer.parseInt(marks.get(i)) < 60)
           {
              numStudent [1] += 1; 
           } else if (Integer.parseInt(marks.get(i)) >= 60 && Integer.parseInt(marks.get(i)) < 70)
           {
              numStudent [2] += 1; 
           } else if (Integer.parseInt(marks.get(i)) >= 70 && Integer.parseInt(marks.get(i)) < 80)
           {
              numStudent [3] += 1; 
           } else 
           {
             numStudent [4] += 1;  
           }
       }
       
       //connecting the two arrays together 
       level [0] += ": " + Integer.toString(numStudent [0]);
       level [1] += ": " + Integer.toString(numStudent [1]);
       level [2] += ": " + Integer.toString(numStudent [2]);
       level [3] += ": " + Integer.toString(numStudent [3]);
       level [4] += ": " + Integer.toString(numStudent [4]);
       
       //return the level
       return level;
    }
    
     /*
     * This method displays the marks on the output box
     * 
     */
    public void display ()
    {
       //Sort the marks 
       textAreaOutput.setText("Sorted Marks\n" + "*****\n");
       Collections.sort(marks);
        
       //shows the marks in a listed format 
       for (int i = 0; i < marks.size(); i++)
       {
        textAreaOutput.setText(textAreaOutput.getText() + marks.get(i) + "\n");
       }  
    }
    
    public FrameMarks_U3_A6_Summative() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelMark = new javax.swing.JLabel();
        textInputMark = new javax.swing.JTextField();
        buttonAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        buttonDisplay = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaAnalyze = new javax.swing.JTextArea();
        buttonAnalyze = new javax.swing.JButton();
        buttonInitialize = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTitle.setText("Marks Program ");

        labelMark.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        labelMark.setText("Student Mark:");

        buttonAdd.setText("Add");
        buttonAdd.setEnabled(false);
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        buttonAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                buttonAddKeyTyped(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBar(null);

        textAreaOutput.setEditable(false);
        textAreaOutput.setColumns(20);
        textAreaOutput.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textAreaOutput.setLineWrap(true);
        textAreaOutput.setRows(5);
        textAreaOutput.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textAreaOutput);

        buttonDisplay.setText("Display");
        buttonDisplay.setEnabled(false);
        buttonDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDisplayActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBar(null);

        textAreaAnalyze.setEditable(false);
        textAreaAnalyze.setColumns(20);
        textAreaAnalyze.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        textAreaAnalyze.setLineWrap(true);
        textAreaAnalyze.setRows(5);
        textAreaAnalyze.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textAreaAnalyze);

        buttonAnalyze.setText("Analyze");
        buttonAnalyze.setEnabled(false);
        buttonAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnalyzeActionPerformed(evt);
            }
        });

        buttonInitialize.setText("Initialize");
        buttonInitialize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInitializeActionPerformed(evt);
            }
        });

        buttonRemove.setText("Remove");
        buttonRemove.setEnabled(false);
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(buttonDisplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonAnalyze)
                .addGap(100, 100, 100))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelTitle)
                        .addGap(18, 18, 18)
                        .addComponent(buttonInitialize))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelMark)
                        .addGap(18, 18, 18)
                        .addComponent(textInputMark, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(buttonAdd)
                        .addGap(27, 27, 27)
                        .addComponent(buttonRemove)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonInitialize))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMark)
                    .addComponent(textInputMark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonRemove))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAnalyze)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //allows user to exit the application  
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
       
       //The mark entered must be between 0 to 100
       if (Integer.parseInt(textInputMark.getText()) >= 0 &&Integer.parseInt(textInputMark.getText()) <= 100 )
       {
           //retrieve and add the mark to the arraylist
           marks.add (textInputMark.getText());
       } else 
       { 
           //Display a message informing the user to enter a numeric value 
           System.out.println("Mark is not between 0 to 100");
       }
        
       //the marks is added directly to the output box 
       display();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDisplayActionPerformed
        display();
    }//GEN-LAST:event_buttonDisplayActionPerformed

    private void buttonInitializeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInitializeActionPerformed
        
       //original marks 
       Collections.addAll (marks, "34","55","45","74","87");
        
       //to not initialize twice
       buttonInitialize.setEnabled(false);
       
       //enable the add button after the initialize button is pressed
       buttonAdd.setEnabled(true);
       
       //enable the display button after the initialize button is pressed
       buttonDisplay.setEnabled(true);
       
       //enable the analyze button after the initialize button is pressed
       buttonAnalyze.setEnabled(true);
       
       //enable the remove button after the initialize button is pressed
       buttonRemove.setEnabled(true);
       
    }//GEN-LAST:event_buttonInitializeActionPerformed

    private void buttonAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnalyzeActionPerformed
        
        //finds the range of the marks 
        int range;
        range = maxNumber() - minNumber();
        
        //assign a new string to the method (returning all 5 elements)
        String [] analyzed = studentLevel();
        
       //round the output to two decimal places
       DecimalFormat round = new DecimalFormat ("###.##");
       
       //Display the information 
       textAreaAnalyze.setText("Class average: " + round.format(classAverage()) + "%" 
               + "\nMaximum mark: " + maxNumber() 
               + "\nMinimum mark: " + minNumber() 
               + "\nRange of marks: " + range 
               + "\n" + analyzed[0] 
               + "\n" + analyzed[1]
               + "\n" + analyzed[2] 
               + "\n" + analyzed[3] 
               + "\n" + analyzed[4]);
       
    }//GEN-LAST:event_buttonAnalyzeActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
     
     //declaring variable 
     int index = 0;
      
     //search the marks from the list that has been typed by the user
     index = Collections.binarySearch(marks,textInputMark.getText());
        
     //if the search goes beyond the boundaries (less than zero)
     if (index == -1)
     {
        //display the message 
        System.out.println("Not found, try again. ");
     }
     else 
     {
       //remove the mark that has been typed in by the user 
        marks.remove(textInputMark.getText());
     }
     
     //The mark is removed directly from the output box
     display();
        
    }//GEN-LAST:event_buttonRemoveActionPerformed

    private void buttonAddKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buttonAddKeyTyped
        
        //prevents user to enter a non-numeric value
           char ch = evt.getKeyChar();
        if (!Character.isDigit(ch)){
            evt.consume();
        }
       
    }//GEN-LAST:event_buttonAddKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMarks_U3_A6_Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMarks_U3_A6_Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMarks_U3_A6_Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMarks_U3_A6_Summative.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMarks_U3_A6_Summative().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAnalyze;
    private javax.swing.JButton buttonDisplay;
    private javax.swing.JButton buttonInitialize;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelMark;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextArea textAreaAnalyze;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextField textInputMark;
    // End of variables declaration//GEN-END:variables
}
